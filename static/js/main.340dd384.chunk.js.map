{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/CenturyFilter.tsx","components/QueryFilter.tsx","components/SexFilter.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","components/Home.tsx","components/PageNotFound.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","CenturyFilter","className","map","century","cn","getAll","includes","filter","cen","length","QueryFilter","setSeachParams","type","placeholder","get","onChange","e","target","SexFilter","sex","PeopleFilters","query","Loader","PeopleTable","people","slug","useParams","motherContent","person","some","p","name","motherName","find","fatherContent","fatherName","href","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","isLoading","setIsLoading","setPeople","error","setError","filteredPeople","setFilteredPeople","useEffect","getPeople","catch","finally","useMemo","toLowerCase","Math","floor","Navbar","role","isActive","Home","PageNotFound","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"gSAQO,SAASA,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,C,mCC/BYY,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIEC,GAAI,CACFC,OAAQxB,EAAcsB,EAAcH,KAElCC,GAPN,aASGF,IAGN,EC/BYO,EAAgB,WAC3B,IACA,EAAuBJ,cAAhBC,EAAP,oBAEA,OACE,qBAAKI,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SANY,CAAC,KAAM,KAAM,KAAM,KAAM,MAOxBC,KAAI,SAAAC,GAAO,OACpB,cAAC,EAAD,CAEE,UAAQ,UACRF,UAAWG,IAAG,cAAe,CAC3B,UAAWP,EAAaQ,OAAO,WAAWC,SAASH,KAErDT,OAAQG,EAAaQ,OAAO,WAAWC,SAASH,GAC5C,CACAA,QAASN,EACNQ,OAAO,WAAWE,QAAO,SAAAC,GAAG,OAAIA,IAAQL,CAAZ,KAC7B,CACFA,QAAQ,GAAD,mBAAMN,EACVQ,OAAO,YADH,CACeF,KAZ5B,SAeGA,GAdIA,EAFa,MAqBxB,qBAAKF,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAWG,IAAG,oBAAqB,CACjC,cAAeP,EAAaQ,OAAO,WAAWI,OAAS,IAEzDf,OAAQ,CAAES,QAAS,MALrB,uBAaT,EC7CYO,EAAc,WACzB,MAAuCd,cAAvC,mBAAOC,EAAP,KAAqBc,EAArB,KAEA,OACE,qBAAKV,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UAEE,uBACE,UAAQ,aACRW,KAAK,SACLX,UAAU,QACVY,YAAY,SACZ5B,MAAOY,EAAaiB,IAAI,UAAY,GACpCC,SAAU,SAACC,GACTnB,EAAaN,IAAI,QAAjB,UAA6ByB,EAAEC,OAAOhC,QAEJ,KAA9BY,EAAaiB,IAAI,UACnBjB,EAAaX,OAAO,SAGtByB,EAAed,EAChB,IAGH,sBAAMI,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,eAKlD,EC5BYiB,EAAY,WACvB,MAAuBtB,cACjBuB,EADN,oBACyBL,IAAI,OAE7B,OACE,oBAAGb,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEA,UAAWG,IAAG,CACZ,YAAqB,OAARe,IAEfzB,OAAQ,CAAEyB,IAAK,MAJjB,iBASA,cAAC,EAAD,CACElB,UAAWG,IAAG,CACZ,YAAqB,MAARe,IAEfzB,OAAQ,CAAEyB,IAAK,KAJjB,kBASA,cAAC,EAAD,CACElB,UAAWG,IAAG,CACZ,YAAqB,MAARe,IAEfzB,OAAQ,CAAEyB,IAAK,KAJjB,sBAWL,EChCYC,EAAgB,WAC3B,MAAuBxB,cAAhBC,EAAP,oBAEA,OACE,sBAAKI,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAWG,IAAG,8BAA+B,CAC3C,cAAeP,EAAaf,YAE9BY,OAAQ,CAAE2B,MAAO,KAAMlB,QAAS,KAAMgB,IAAK,MAJ7C,mCAWP,EC9BYG,G,MAAS,kBACpB,qBAAKrB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCMTsB,EAA0C,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChDC,EAASC,cAATD,KACR,EAAuB7B,cAAhBC,EAAP,oBAEM8B,EAAgB,SAACC,GACgC,IAAD,EAApD,OAAIJ,EAAOK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAASH,EAAOI,UAAtB,IAEb,cAAC,IAAD,CAAM/B,UAAU,kBAAkBH,GAAE,4BAAa0B,EAAOS,MAAK,SAAAH,GAAC,OAAIA,EAAEC,OAASH,EAAOI,UAAtB,WAA1B,aAAa,EAAgDP,KAA7D,mBAAqE5B,QAArE,IAAqEA,OAArE,EAAqEA,EAAcjB,YAAvH,SACGgD,EAAOI,aAKVJ,EAAOI,WACFJ,EAAOI,WAGT,GACR,EAEKE,EAAgB,SAACN,GACgC,IAAD,EAApD,OAAIJ,EAAOK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAASH,EAAOO,UAAtB,IAEb,cAAC,IAAD,CAAMrC,GAAE,4BAAa0B,EAAOS,MAAK,SAAAH,GAAC,OAAIA,EAAEC,OAASH,EAAOO,UAAtB,WAA1B,aAAa,EAAgDV,KAA7D,mBAAqE5B,QAArE,IAAqEA,OAArE,EAAqEA,EAAcjB,YAA3F,SACGgD,EAAOO,aAKVP,EAAOO,WACFP,EAAOO,WAGT,GACR,EAED,OACE,wBACE,UAAQ,cACRlC,UAAU,uDAFZ,UAIE,gCACE,+BACE,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,mBAAGmC,KAAK,qBAAR,SACE,sBAAMnC,UAAU,OAAhB,SACE,mBAAGA,UAAU,yBAMrB,6BACE,uBAAMA,UAAU,8BAAhB,gBAEE,mBAAGmC,KAAK,oBAAR,SACE,sBAAMnC,UAAU,OAAhB,SACE,mBAAGA,UAAU,yBAMrB,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,mBAAGmC,KAAK,gCAAR,SACE,sBAAMnC,UAAU,OAAhB,SACE,mBAAGA,UAAU,4BAMrB,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,mBAAGmC,KAAK,qBAAR,SACE,sBAAMnC,UAAU,OAAhB,SACE,mBAAGA,UAAU,yBAMrB,wCACA,6CAIJ,gCAEGuB,EAAOtB,KAAI,SAAA0B,GAAM,OAChB,qBAEE,UAAQ,SACR3B,UAAWG,IAAG,CACZ,yBAA0BwB,EAAOH,OAASA,IAJ9C,UAOE,6BACE,cAAC,IAAD,CACE3B,GAAE,kBAAa8B,EAAOH,KAApB,mBAA4B5B,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAcjB,YAC5CqB,UAAWG,IAAG,CACZ,kBAAkC,MAAfwB,EAAOT,MAH9B,SAMGS,EAAOG,SAIZ,6BAAKH,EAAOT,MACZ,6BAAKS,EAAOS,OACZ,6BAAKT,EAAOU,OACZ,6BACGX,EAAcC,KAEjB,6BACGM,EAAcN,OAxBZA,EAAOH,KAFE,QAiCzB,E,cCpIKc,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCCA,IAAMC,EAAa,WACxB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAmB,IAA/C,mBAAO1B,EAAP,KAAe6B,EAAf,KACA,EAA0BH,oBAAkB,GAA5C,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA4CL,mBAAmB1B,GAA/D,mBAAOgC,EAAP,KAAuBC,EAAvB,KAEA,EAAuB7D,cAAhBC,EAAP,oBAyBA,OAvBA6D,qBAAU,WACRN,GAAa,GDVV,WAAP,+BCWIO,GAAYd,KAAKQ,GAAWO,OAAM,kBAAML,GAAS,EAAf,IAC/BM,SAAQ,kBAAMT,GAAa,EAAnB,GACZ,GAAE,IAEHU,mBAAQ,WACNL,EAAkBjC,EAAOjB,QAAO,SAAAqB,GAAM,qBAAIA,EAAOG,KAAKgC,cACnDzD,UAAS,UAAAT,EAAaiB,IAAI,gBAAjB,eAA2BiD,gBAAiB,MADd,UAEvCnC,EAAOI,kBAFgC,aAEvC,EAAmB+B,cAAczD,UAAS,UAAAT,EAC1CiB,IAAI,gBADsC,eAC5BiD,gBAAiB,OAHQ,UAIvCnC,EAAOO,kBAJgC,aAIvC,EAAmB4B,cAAczD,UAAS,UAAAT,EAC1CiB,IAAI,gBADsC,eAC5BiD,gBAAiB,IALI,IAMnCxD,QAAO,SAAAqB,GAAM,OAAK/B,EAAaiB,IAAI,OAChCc,EAAOT,MAAQtB,EAAaiB,IAAI,OAChCc,EAAOT,GAFG,IAGbZ,QAAO,SAAAqB,GAAM,OAAK/B,EAChBQ,OAAO,WAAWI,OAAS,EAC1BZ,EACCQ,OAAO,WAAWC,SAAS0D,KAAKC,MAAMrC,EAAOS,KAAO,KAAKzD,YAC1DgD,CAJU,IAKjB,GAAE,CAAC/B,EAAc2B,IAGhB,qCACE,oBAAIvB,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACGuB,EAAOf,OAAS,IAAM0C,GACrB,qBAAKlD,UAAU,uCAAf,SACE,cAAC,EAAD,MAIJ,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGkD,GAAa,cAAC,EAAD,IAEd,qCACGG,IAAUH,GAEX,mBAAG,UAAQ,qBAAX,kCAKmB,IAAlB3B,EAAOf,SAAiB0C,GACvB,mBAAG,UAAQ,kBAAX,+CAIyB,IAA1BK,EAAe/C,QAEd,4FAOHe,EAAOf,OAAS,GAAK,cAAC,EAAD,CAAae,OAAQgC,gBAOxD,ECpFYU,EAAS,WACpB,OACE,qBACE,UAAQ,MACRjE,UAAU,iCACVkE,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKlE,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEA,UAAW,qBAAGmE,SACV,0CACA,aAFO,EAGXtE,GAAG,IAJL,kBAUA,cAAC,IAAD,CACE,eAAa,OACbG,UAAW,qBAAGmE,SACV,0CACA,aAFO,EAGXtE,GAAG,UALL,0BAaT,ECnCYuE,G,MAAO,kBAAO,oBAAIpE,UAAU,QAAd,sBAAP,GCAPqE,EAAe,kBAAO,oBAAIrE,UAAU,QAAd,2BAAP,ECSfsE,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKtE,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuE,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAU3E,GAAG,IAAI4E,SAAO,MACrD,cAAC,IAAD,CAAOF,KAAK,WAAWC,QAAS,cAAC,EAAD,MAChC,cAAC,IAAD,CAAOD,KAAK,gBAAgBC,QAAS,cAAC,EAAD,MACrC,cAAC,IAAD,CAAOD,KAAK,KAAKC,QAAS,cAAC,EAAD,eAMrC,ECnBDE,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.340dd384.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nexport const CenturyFilter = () => {\n  const centuries = ['16', '17', '18', '19', '20'];\n  const [searchParams] = useSearchParams();\n\n  return (\n    <div className=\"panel-block\">\n      <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n        <div className=\"level-left\">\n          {centuries.map(century => (\n            <SearchLink\n              key={century}\n              data-cy=\"century\"\n              className={cn('button mr-1', {\n                'is-info': searchParams.getAll('century').includes(century),\n              })}\n              params={searchParams.getAll('century').includes(century)\n                ? {\n                  century: searchParams\n                    .getAll('century').filter(cen => cen !== century),\n                } : {\n                  century: [...searchParams\n                    .getAll('century'), century],\n                }}\n            >\n              {century}\n            </SearchLink>\n          ))}\n        </div>\n\n        <div className=\"level-right ml-4\">\n          <SearchLink\n            data-cy=\"centuryALL\"\n            className={cn('button is-success', {\n              'is-outlined': searchParams.getAll('century').length > 0,\n            })}\n            params={{ century: null }}\n          >\n            All\n          </SearchLink>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\n\nexport const QueryFilter = () => {\n  const [searchParams, setSeachParams] = useSearchParams();\n\n  return (\n    <div className=\"panel-block\">\n      <p className=\"control has-icons-left\">\n\n        <input\n          data-cy=\"NameFilter\"\n          type=\"search\"\n          className=\"input\"\n          placeholder=\"Search\"\n          value={searchParams.get('query') || ''}\n          onChange={(e) => {\n            searchParams.set('query', `${e.target.value}`);\n\n            if (searchParams.get('query') === '') {\n              searchParams.delete('query');\n            }\n\n            setSeachParams(searchParams);\n          }}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-search\" aria-hidden=\"true\" />\n        </span>\n      </p>\n    </div>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nexport const SexFilter = () => {\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get('sex');\n\n  return (\n    <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n      <SearchLink\n        className={cn({\n          'is-active': sex === null,\n        })}\n        params={{ sex: null }}\n      >\n        All\n\n      </SearchLink>\n      <SearchLink\n        className={cn({\n          'is-active': sex === 'm',\n        })}\n        params={{ sex: 'm' }}\n      >\n        Male\n\n      </SearchLink>\n      <SearchLink\n        className={cn({\n          'is-active': sex === 'f',\n        })}\n        params={{ sex: 'f' }}\n      >\n        Female\n\n      </SearchLink>\n    </p>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { CenturyFilter } from './CenturyFilter';\nimport { QueryFilter } from './QueryFilter';\nimport { SearchLink } from './SearchLink';\nimport { SexFilter } from './SexFilter';\n\nexport const PeopleFilters = () => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <SexFilter />\n\n      <QueryFilter />\n\n      <CenturyFilter />\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className={cn('button is-link is-fullwidth', {\n            'is-outlined': searchParams.entries(),\n          })}\n          params={{ query: null, century: null, sex: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype PeopleTableProps = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<PeopleTableProps> = ({ people }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const motherContent = (person: Person) => {\n    if (people.some(p => p.name === person.motherName)) {\n      return (\n        <Link className=\"has-text-danger\" to={`/people/${people.find(p => p.name === person.motherName)?.slug}?${searchParams?.toString()}`}>\n          {person.motherName}\n        </Link>\n      );\n    }\n\n    if (person.motherName) {\n      return person.motherName;\n    }\n\n    return '-';\n  };\n\n  const fatherContent = (person: Person) => {\n    if (people.some(p => p.name === person.fatherName)) {\n      return (\n        <Link to={`/people/${people.find(p => p.name === person.fatherName)?.slug}?${searchParams?.toString()}`}>\n          {person.fatherName}\n        </Link>\n      );\n    }\n\n    if (person.fatherName) {\n      return person.fatherName;\n    }\n\n    return '-';\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <a href=\"#/people?sort=name\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <a href=\"#/people?sort=sex\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <a href=\"#/people?sort=born&amp;order=desc\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort-up\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <a href=\"#/people?sort=died\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={cn({\n              'has-background-warning': person.slug === slug,\n            })}\n          >\n            <td>\n              <Link\n                to={`/people/${person.slug}?${searchParams?.toString()}`}\n                className={cn({\n                  'has-text-danger': person.sex === 'f',\n                })}\n              >\n                {person.name}\n\n              </Link>\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {motherContent(person)}\n            </td>\n            <td>\n              {fatherContent(person)}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\n\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\n\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState<boolean>(false);\n  const [filteredPeople, setFilteredPeople] = useState<Person[]>(people);\n\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople().then(setPeople).catch(() => setError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useMemo(() => {\n    setFilteredPeople(people.filter(person => person.name.toLowerCase()\n      .includes(searchParams.get('query')?.toLowerCase() || '')\n    || person.motherName?.toLowerCase().includes(searchParams\n      .get('query')?.toLowerCase() || '')\n    || person.fatherName?.toLowerCase().includes(searchParams\n      .get('query')?.toLowerCase() || ''))\n      .filter(person => (searchParams.get('sex')\n        ? person.sex === searchParams.get('sex')\n        : person.sex))\n      .filter(person => (searchParams\n        .getAll('century').length > 0\n        ? searchParams\n          .getAll('century').includes(Math.floor(person.born / 100).toString())\n        : person)));\n  }, [searchParams, people]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {people.length > 0 && !isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              <>\n                {error && !isLoading\n              && (\n                <p data-cy=\"peopleLoadingError\">\n                  Something went wrong\n                </p>\n              )}\n\n                {people.length === 0 && !isLoading && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n                {filteredPeople.length === 0\n                && (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                )}\n\n              </>\n\n              {people.length > 0 && <PeopleTable people={filteredPeople} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => (isActive\n              ? 'navbar-item has-background-grey-lighter'\n              : 'navbar-item')}\n            to=\"/\"\n          >\n            Home\n\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={({ isActive }) => (isActive\n              ? 'navbar-item has-background-grey-lighter'\n              : 'navbar-item')}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const Home = () => (<h1 className=\"title\">Home Page</h1>);\n","export const PageNotFound = () => (<h1 className=\"title\">Page not found</h1>);\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { Home } from './components/Home';\nimport { PageNotFound } from './components/PageNotFound';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/people/\" element={<PeoplePage />} />\n            <Route path=\"/people/:slug\" element={<PeoplePage />} />\n            <Route path=\"/*\" element={<PageNotFound />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}